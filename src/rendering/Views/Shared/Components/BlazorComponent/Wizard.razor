<CascadingValue Value="this">
    <div id="@Id">
        <div class="card">
            <div class="card-header">
                <div class="row justify-content-center align-items-center">
                    Step @(ActiveStepIx + 1) of @Steps.Count
                </div>
            </div>
            <div class="card-body">
                @ChildContent
            </div>
            <div class="card-footer">
                <div class="container">
                    <div class="row">
                        <div class="col p-0">
                            <button class="col-6 btn btn-secondary btn-sm float-left" type="button" disabled="@(ActiveStepIx == 0)" @onclick="GoBack">
                                Previous
                            </button>
                        </div>
                        <div class="col p-0">
                            @if (IsLastStep)
                            {
                                <button class="col-6 btn btn-primary btn-sm float-right" type="submit" @onclick="GoNext">
                                    Submit
                                </button>
                            }
                            else
                            {
                                <button class="col-6 btn btn-primary btn-sm float-right" type="button" @onclick:stopPropagation=true @onclick="GoNext">
                                    Next
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</CascadingValue>

@code
{
    /// <summary>
    /// List of <see cref="WizardStep"/> added to the Wizard
    /// </summary>
    protected internal List<WizardStep> Steps = [];

    /// <summary>
    /// The control Id
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// The ChildContent container for <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// The Active <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public WizardStep? ActiveStep { get; set; }

    /// <summary>
    /// The Index number of the <see cref="ActiveStep"/>
    /// </summary>
    [Parameter]
    public int ActiveStepIx { get; set; }

    /// <summary>
    /// Determines whether the Wizard is in the last step
    /// </summary>

    public bool IsLastStep { get; set; }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the previous Index
    /// </summary>

    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    protected internal void GoBack()
    {
        if (this.ActiveStepIx > 0)
        {
            SetActive(this.Steps[this.ActiveStepIx - 1]);
        }
    }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the next Index
    /// </summary>
    protected internal void GoNext()
    {
        if (this.ActiveStepIx >= this.Steps.Count - 1)
        {
            return;
        }

        var stepIsValid = IsFieldValid(this.EditContext!, "Date");
        if (stepIsValid && this.ActiveStep != null) SetActive(this.Steps[(this.Steps.IndexOf(this.ActiveStep) + 1)]);
    }

    private static bool IsStepValid(EditContext editContext, WizardStep step)
    {
        var fieldNames = step.NamesOfFieldsToValidate;
        if (fieldNames == null || fieldNames.Length == 0)
        {
            return true;
        }

        return fieldNames.All(fieldName => IsFieldValid(editContext, fieldName));
    }

    private static bool IsFieldValid(EditContext editContext, string fieldName)
    {
        var fieldIdentifier = editContext.Field(fieldName);
        editContext.NotifyFieldChanged(fieldIdentifier);
        return !editContext.GetValidationMessages(fieldIdentifier).Any();
    }

    /// <summary>
    /// Populates the <see cref="ActiveStep"/> the Sets the passed in <see cref="WizardStep"/> instance as the
    /// </summary>
    /// <param name="step">The WizardStep</param>

    protected internal void SetActive(WizardStep step)
    {
        this.ActiveStep = step ?? throw new ArgumentNullException(nameof(step));

        this.ActiveStepIx = StepsIndex(step);
        this.IsLastStep = this.ActiveStepIx == this.Steps.Count - 1;
    }

    /// <summary>
    /// Retrieves the index of the current <see cref="WizardStep"/> in the Step List
    /// </summary>
    /// <param name="step">The WizardStep</param>
    /// <returns></returns>
    public int StepsIndex(WizardStep step) => StepsIndexInternal(step);

    protected int StepsIndexInternal(WizardStep step)
    {
        if (step == null)
        {
            throw new ArgumentNullException(nameof(step));
        }

        return this.Steps.IndexOf(step);
    }

    /// <summary>
    /// Adds a <see cref="WizardStep"/> to the WizardSteps list
    /// </summary>
    /// <param name="step"></param>
    protected internal void AddStep(WizardStep step)
    {
        this.Steps.Add(step);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        this.SetActive(this.Steps[0]);
        this.StateHasChanged();
    }
}